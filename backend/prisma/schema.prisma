generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPER_ADMIN
}

enum Gender {
  MEN
  WOMEN
  MEN_AND_WOMEN
  KIDS_BOY
  KIDS_GIRL
  KIDS_BOYS_AND_GIRL
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  password     String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String?  @unique
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  gender      Gender
  price       Float
  stock       Int
  soldCount   Int           @default(0)
  rating      Float?
  isFeatured  Boolean       @default(false)
  isOnSale    Boolean       @default(false)
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  specifications ProductSpecification[]
  images         Image[]
  category       Category               @relation(fields: [categoryId], references: [id])
  categoryId     Int
  brand          Brand                  @relation(fields: [brandId], references: [id])
  brandId        Int

  @@index([gender])
  @@index([categoryId])
  @@index([isFeatured])
  @@index([isOnSale])
  @@index([status])
  @@index([brandId])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parentId  Int?
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  products  Product[]

  @@index([parentId])
}

model Image {
  id        String    @id @default(cuid())
  url       String    @unique
  alt       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model ProductSpecification {
  id        Int     @id @default(autoincrement())
  specKey   String
  specValue String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, specKey])
  @@index([specKey])
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}
